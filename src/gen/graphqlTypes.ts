// Source code generated by graphql-codegen. DO NOT EDIT!
/* eslint-disable */
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core'
export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  AWSDate: any
  AWSDateTime: any
  AWSEmail: any
  AWSIPAddress: any
  AWSJSON: any
  AWSPhone: any
  AWSTime: any
  AWSTimestamp: any
  AWSURL: any
  EntitlementType: 'numeric' | 'boolean'
}

export type AddEntitlementsSequenceInput = {
  description?: InputMaybe<Scalars['String']>
  name: Scalars['String']
  transitions: Array<EntitlementsSequenceTransitionInput>
}

export type AddEntitlementsSetInput = {
  description?: InputMaybe<Scalars['String']>
  entitlements: Array<EntitlementInput>
  name: Scalars['String']
}

export type ApplyEntitlementsSequenceToUserInput = {
  entitlementsSequenceName: Scalars['String']
  externalId: Scalars['String']
  transitionsRelativeToEpochMs?: InputMaybe<Scalars['Float']>
}

export type ApplyEntitlementsSequenceToUsersInput = {
  operations: Array<ApplyEntitlementsSequenceToUserInput>
}

export type ApplyEntitlementsSetToUserInput = {
  entitlementsSetName: Scalars['String']
  externalId: Scalars['String']
}

export type ApplyEntitlementsSetToUsersInput = {
  operations: Array<ApplyEntitlementsSetToUserInput>
}

export type ApplyEntitlementsToUserInput = {
  entitlements: Array<EntitlementInput>
  externalId: Scalars['String']
}

export type ApplyEntitlementsToUsersInput = {
  operations: Array<ApplyEntitlementsToUserInput>
}

export type EntitledUser = {
  __typename?: 'EntitledUser'
  externalId: Scalars['String']
}

export type Entitlement = {
  __typename?: 'Entitlement'
  description?: Maybe<Scalars['String']>
  name: Scalars['String']
  value: Scalars['Int']
}

export type EntitlementConsumer = {
  __typename?: 'EntitlementConsumer'
  id: Scalars['ID']
  issuer: Scalars['String']
}

export type EntitlementConsumption = {
  __typename?: 'EntitlementConsumption'
  available: Scalars['Int']
  consumed: Scalars['Int']
  consumer?: Maybe<EntitlementConsumer>
  firstConsumedAtEpochMs?: Maybe<Scalars['Float']>
  lastConsumedAtEpochMs?: Maybe<Scalars['Float']>
  name: Scalars['String']
  value: Scalars['Int']
}

export type EntitlementDefinition = {
  __typename?: 'EntitlementDefinition'
  description?: Maybe<Scalars['String']>
  name: Scalars['String']
  type: Scalars['EntitlementType']
}

export type EntitlementDefinitionConnection = {
  __typename?: 'EntitlementDefinitionConnection'
  items: Array<EntitlementDefinition>
  nextToken?: Maybe<Scalars['String']>
}

export type EntitlementInput = {
  description?: InputMaybe<Scalars['String']>
  name: Scalars['String']
  value: Scalars['Int']
}

export type EntitlementsConsumption = {
  __typename?: 'EntitlementsConsumption'
  consumption: Array<EntitlementConsumption>
  entitlements: UserEntitlements
}

export type EntitlementsSequence = {
  __typename?: 'EntitlementsSequence'
  createdAtEpochMs: Scalars['Float']
  description?: Maybe<Scalars['String']>
  name: Scalars['String']
  transitions: Array<EntitlementsSequenceTransition>
  updatedAtEpochMs: Scalars['Float']
  version: Scalars['Int']
}

export type EntitlementsSequenceTransition = {
  __typename?: 'EntitlementsSequenceTransition'
  duration?: Maybe<Scalars['String']>
  entitlementsSetName: Scalars['String']
}

export type EntitlementsSequenceTransitionInput = {
  duration?: InputMaybe<Scalars['String']>
  entitlementsSetName: Scalars['String']
}

export type EntitlementsSequencesConnection = {
  __typename?: 'EntitlementsSequencesConnection'
  items: Array<EntitlementsSequence>
  nextToken?: Maybe<Scalars['String']>
}

export type EntitlementsSet = {
  __typename?: 'EntitlementsSet'
  createdAtEpochMs: Scalars['Float']
  description?: Maybe<Scalars['String']>
  entitlements: Array<Entitlement>
  name: Scalars['String']
  updatedAtEpochMs: Scalars['Float']
  version: Scalars['Int']
}

export type EntitlementsSetsConnection = {
  __typename?: 'EntitlementsSetsConnection'
  items: Array<EntitlementsSet>
  nextToken?: Maybe<Scalars['String']>
}

export type ExternalEntitlementsConsumption = {
  __typename?: 'ExternalEntitlementsConsumption'
  consumption: Array<EntitlementConsumption>
  entitlements: ExternalUserEntitlements
}

export type ExternalUserEntitlements = {
  __typename?: 'ExternalUserEntitlements'
  createdAtEpochMs: Scalars['Float']
  entitlements: Array<Entitlement>
  entitlementsSequenceName?: Maybe<Scalars['String']>
  entitlementsSetName?: Maybe<Scalars['String']>
  externalId: Scalars['String']
  owner?: Maybe<Scalars['String']>
  transitionsRelativeToEpochMs?: Maybe<Scalars['Float']>
  updatedAtEpochMs: Scalars['Float']
  version: Scalars['Float']
}

export type ExternalUserEntitlementsError = {
  __typename?: 'ExternalUserEntitlementsError'
  error: Scalars['String']
}

export type ExternalUserEntitlementsResult =
  | ExternalUserEntitlements
  | ExternalUserEntitlementsError

export type GetEntitlementDefinitionInput = {
  name: Scalars['String']
}

export type GetEntitlementsForUserInput = {
  externalId: Scalars['String']
}

export type GetEntitlementsSequenceInput = {
  name: Scalars['String']
}

export type GetEntitlementsSetInput = {
  name: Scalars['String']
}

export type InternalGetEntitlementsForUserInput = {
  userId: Scalars['ID']
}

export type Mutation = {
  __typename?: 'Mutation'
  addEntitlementsSequence: EntitlementsSequence
  addEntitlementsSet: EntitlementsSet
  applyEntitlementsSequenceToUser: ExternalUserEntitlements
  applyEntitlementsSequenceToUsers: Array<ExternalUserEntitlementsResult>
  applyEntitlementsSetToUser: ExternalUserEntitlements
  applyEntitlementsSetToUsers: Array<ExternalUserEntitlementsResult>
  applyEntitlementsToUser: ExternalUserEntitlements
  applyEntitlementsToUsers: Array<ExternalUserEntitlementsResult>
  removeEntitledUser?: Maybe<EntitledUser>
  removeEntitlementsSequence?: Maybe<EntitlementsSequence>
  removeEntitlementsSet?: Maybe<EntitlementsSet>
  setEntitlementsSequence: EntitlementsSequence
  setEntitlementsSet: EntitlementsSet
}

export type MutationAddEntitlementsSequenceArgs = {
  input: AddEntitlementsSequenceInput
}

export type MutationAddEntitlementsSetArgs = {
  input: AddEntitlementsSetInput
}

export type MutationApplyEntitlementsSequenceToUserArgs = {
  input: ApplyEntitlementsSequenceToUserInput
}

export type MutationApplyEntitlementsSequenceToUsersArgs = {
  input: ApplyEntitlementsSequenceToUsersInput
}

export type MutationApplyEntitlementsSetToUserArgs = {
  input: ApplyEntitlementsSetToUserInput
}

export type MutationApplyEntitlementsSetToUsersArgs = {
  input: ApplyEntitlementsSetToUsersInput
}

export type MutationApplyEntitlementsToUserArgs = {
  input: ApplyEntitlementsToUserInput
}

export type MutationApplyEntitlementsToUsersArgs = {
  input: ApplyEntitlementsToUsersInput
}

export type MutationRemoveEntitledUserArgs = {
  input: RemoveEntitledUserInput
}

export type MutationRemoveEntitlementsSequenceArgs = {
  input: RemoveEntitlementsSequenceInput
}

export type MutationRemoveEntitlementsSetArgs = {
  input: RemoveEntitlementsSetInput
}

export type MutationSetEntitlementsSequenceArgs = {
  input: SetEntitlementsSequenceInput
}

export type MutationSetEntitlementsSetArgs = {
  input: SetEntitlementsSetInput
}

export type Query = {
  __typename?: 'Query'
  getEntitlementDefinition?: Maybe<EntitlementDefinition>
  getEntitlementsForUser: ExternalEntitlementsConsumption
  getEntitlementsSequence?: Maybe<EntitlementsSequence>
  getEntitlementsSet?: Maybe<EntitlementsSet>
  listEntitlementDefinitions: EntitlementDefinitionConnection
  listEntitlementsSequences: EntitlementsSequencesConnection
  listEntitlementsSets: EntitlementsSetsConnection
}

export type QueryGetEntitlementDefinitionArgs = {
  input: GetEntitlementDefinitionInput
}

export type QueryGetEntitlementsForUserArgs = {
  input: GetEntitlementsForUserInput
}

export type QueryGetEntitlementsSequenceArgs = {
  input: GetEntitlementsSequenceInput
}

export type QueryGetEntitlementsSetArgs = {
  input: GetEntitlementsSetInput
}

export type QueryListEntitlementDefinitionsArgs = {
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
}

export type QueryListEntitlementsSequencesArgs = {
  nextToken?: InputMaybe<Scalars['String']>
}

export type QueryListEntitlementsSetsArgs = {
  nextToken?: InputMaybe<Scalars['String']>
}

export type RemoveEntitledUserInput = {
  externalId: Scalars['String']
}

export type RemoveEntitlementsSequenceInput = {
  name: Scalars['String']
}

export type RemoveEntitlementsSetInput = {
  name: Scalars['String']
}

export type SetEntitlementsSequenceInput = {
  description?: InputMaybe<Scalars['String']>
  name: Scalars['String']
  transitions: Array<EntitlementsSequenceTransitionInput>
}

export type SetEntitlementsSetInput = {
  description?: InputMaybe<Scalars['String']>
  entitlements: Array<EntitlementInput>
  name: Scalars['String']
}

export type UserEntitlements = {
  __typename?: 'UserEntitlements'
  entitlements: Array<Entitlement>
  entitlementsSetName?: Maybe<Scalars['String']>
  version: Scalars['Float']
}

export type AddEntitlementsSequenceMutationVariables = Exact<{
  input: AddEntitlementsSequenceInput
}>

export type AddEntitlementsSequenceMutation = {
  __typename?: 'Mutation'
  addEntitlementsSequence: {
    __typename?: 'EntitlementsSequence'
    name: string
    description?: string | null
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    transitions: Array<{
      __typename?: 'EntitlementsSequenceTransition'
      entitlementsSetName: string
      duration?: string | null
    }>
  }
}

export type AddEntitlementsSetMutationVariables = Exact<{
  input: AddEntitlementsSetInput
}>

export type AddEntitlementsSetMutation = {
  __typename?: 'Mutation'
  addEntitlementsSet: {
    __typename?: 'EntitlementsSet'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    name: string
    description?: string | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  }
}

export type ApplyEntitlementsSequenceToUserMutationVariables = Exact<{
  input: ApplyEntitlementsSequenceToUserInput
}>

export type ApplyEntitlementsSequenceToUserMutation = {
  __typename?: 'Mutation'
  applyEntitlementsSequenceToUser: {
    __typename?: 'ExternalUserEntitlements'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    externalId: string
    owner?: string | null
    entitlementsSetName?: string | null
    entitlementsSequenceName?: string | null
    transitionsRelativeToEpochMs?: number | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  }
}

export type ApplyEntitlementsSequenceToUsersMutationVariables = Exact<{
  input: ApplyEntitlementsSequenceToUsersInput
}>

export type ApplyEntitlementsSequenceToUsersMutation = {
  __typename?: 'Mutation'
  applyEntitlementsSequenceToUsers: Array<
    | {
        __typename: 'ExternalUserEntitlements'
        createdAtEpochMs: number
        updatedAtEpochMs: number
        version: number
        externalId: string
        owner?: string | null
        entitlementsSetName?: string | null
        entitlementsSequenceName?: string | null
        transitionsRelativeToEpochMs?: number | null
        entitlements: Array<{
          __typename?: 'Entitlement'
          name: string
          description?: string | null
          value: number
        }>
      }
    | { __typename: 'ExternalUserEntitlementsError'; error: string }
  >
}

export type ApplyEntitlementsSetToUserMutationVariables = Exact<{
  input: ApplyEntitlementsSetToUserInput
}>

export type ApplyEntitlementsSetToUserMutation = {
  __typename?: 'Mutation'
  applyEntitlementsSetToUser: {
    __typename?: 'ExternalUserEntitlements'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    externalId: string
    owner?: string | null
    entitlementsSetName?: string | null
    entitlementsSequenceName?: string | null
    transitionsRelativeToEpochMs?: number | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  }
}

export type ApplyEntitlementsSetToUsersMutationVariables = Exact<{
  input: ApplyEntitlementsSetToUsersInput
}>

export type ApplyEntitlementsSetToUsersMutation = {
  __typename?: 'Mutation'
  applyEntitlementsSetToUsers: Array<
    | {
        __typename: 'ExternalUserEntitlements'
        createdAtEpochMs: number
        updatedAtEpochMs: number
        version: number
        externalId: string
        owner?: string | null
        entitlementsSetName?: string | null
        entitlementsSequenceName?: string | null
        transitionsRelativeToEpochMs?: number | null
        entitlements: Array<{
          __typename?: 'Entitlement'
          name: string
          description?: string | null
          value: number
        }>
      }
    | { __typename: 'ExternalUserEntitlementsError'; error: string }
  >
}

export type ApplyEntitlementsToUserMutationVariables = Exact<{
  input: ApplyEntitlementsToUserInput
}>

export type ApplyEntitlementsToUserMutation = {
  __typename?: 'Mutation'
  applyEntitlementsToUser: {
    __typename?: 'ExternalUserEntitlements'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    externalId: string
    owner?: string | null
    entitlementsSetName?: string | null
    entitlementsSequenceName?: string | null
    transitionsRelativeToEpochMs?: number | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  }
}

export type ApplyEntitlementsToUsersMutationVariables = Exact<{
  input: ApplyEntitlementsToUsersInput
}>

export type ApplyEntitlementsToUsersMutation = {
  __typename?: 'Mutation'
  applyEntitlementsToUsers: Array<
    | {
        __typename: 'ExternalUserEntitlements'
        createdAtEpochMs: number
        updatedAtEpochMs: number
        version: number
        externalId: string
        owner?: string | null
        entitlementsSetName?: string | null
        entitlementsSequenceName?: string | null
        transitionsRelativeToEpochMs?: number | null
        entitlements: Array<{
          __typename?: 'Entitlement'
          name: string
          description?: string | null
          value: number
        }>
      }
    | { __typename: 'ExternalUserEntitlementsError'; error: string }
  >
}

export type EntitlementFragment = {
  __typename?: 'Entitlement'
  name: string
  description?: string | null
  value: number
}

export type EntitlementConsumptionFragment = {
  __typename?: 'EntitlementConsumption'
  name: string
  value: number
  consumed: number
  available: number
  firstConsumedAtEpochMs?: number | null
  lastConsumedAtEpochMs?: number | null
  consumer?: {
    __typename?: 'EntitlementConsumer'
    id: string
    issuer: string
  } | null
}

export type EntitlementDefinitionFragment = {
  __typename?: 'EntitlementDefinition'
  name: string
  description?: string | null
  type: 'numeric' | 'boolean'
}

export type EntitlementsSequenceFragment = {
  __typename?: 'EntitlementsSequence'
  name: string
  description?: string | null
  createdAtEpochMs: number
  updatedAtEpochMs: number
  version: number
  transitions: Array<{
    __typename?: 'EntitlementsSequenceTransition'
    entitlementsSetName: string
    duration?: string | null
  }>
}

export type EntitlementsSequencesConnectionFragment = {
  __typename?: 'EntitlementsSequencesConnection'
  nextToken?: string | null
  items: Array<{
    __typename?: 'EntitlementsSequence'
    name: string
    description?: string | null
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    transitions: Array<{
      __typename?: 'EntitlementsSequenceTransition'
      entitlementsSetName: string
      duration?: string | null
    }>
  }>
}

export type EntitlementsSequenceTransitionFragment = {
  __typename?: 'EntitlementsSequenceTransition'
  entitlementsSetName: string
  duration?: string | null
}

export type EntitlementsSetFragment = {
  __typename?: 'EntitlementsSet'
  createdAtEpochMs: number
  updatedAtEpochMs: number
  version: number
  name: string
  description?: string | null
  entitlements: Array<{
    __typename?: 'Entitlement'
    name: string
    description?: string | null
    value: number
  }>
}

export type ExternalEntitlementsConsumptionFragment = {
  __typename?: 'ExternalEntitlementsConsumption'
  entitlements: {
    __typename?: 'ExternalUserEntitlements'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    externalId: string
    owner?: string | null
    entitlementsSetName?: string | null
    entitlementsSequenceName?: string | null
    transitionsRelativeToEpochMs?: number | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  }
  consumption: Array<{
    __typename?: 'EntitlementConsumption'
    name: string
    value: number
    consumed: number
    available: number
    firstConsumedAtEpochMs?: number | null
    lastConsumedAtEpochMs?: number | null
    consumer?: {
      __typename?: 'EntitlementConsumer'
      id: string
      issuer: string
    } | null
  }>
}

export type ExternalUserEntitlementsFragment = {
  __typename?: 'ExternalUserEntitlements'
  createdAtEpochMs: number
  updatedAtEpochMs: number
  version: number
  externalId: string
  owner?: string | null
  entitlementsSetName?: string | null
  entitlementsSequenceName?: string | null
  transitionsRelativeToEpochMs?: number | null
  entitlements: Array<{
    __typename?: 'Entitlement'
    name: string
    description?: string | null
    value: number
  }>
}

export type ExternalUserEntitlementsErrorFragment = {
  __typename?: 'ExternalUserEntitlementsError'
  error: string
}

export type GetEntitlementDefinitionQueryVariables = Exact<{
  input: GetEntitlementDefinitionInput
}>

export type GetEntitlementDefinitionQuery = {
  __typename?: 'Query'
  getEntitlementDefinition?: {
    __typename?: 'EntitlementDefinition'
    name: string
    description?: string | null
    type: 'numeric' | 'boolean'
  } | null
}

export type GetEntitlementsForUserQueryVariables = Exact<{
  input: GetEntitlementsForUserInput
}>

export type GetEntitlementsForUserQuery = {
  __typename?: 'Query'
  getEntitlementsForUser: {
    __typename?: 'ExternalEntitlementsConsumption'
    entitlements: {
      __typename?: 'ExternalUserEntitlements'
      createdAtEpochMs: number
      updatedAtEpochMs: number
      version: number
      externalId: string
      owner?: string | null
      entitlementsSetName?: string | null
      entitlementsSequenceName?: string | null
      transitionsRelativeToEpochMs?: number | null
      entitlements: Array<{
        __typename?: 'Entitlement'
        name: string
        description?: string | null
        value: number
      }>
    }
    consumption: Array<{
      __typename?: 'EntitlementConsumption'
      name: string
      value: number
      consumed: number
      available: number
      firstConsumedAtEpochMs?: number | null
      lastConsumedAtEpochMs?: number | null
      consumer?: {
        __typename?: 'EntitlementConsumer'
        id: string
        issuer: string
      } | null
    }>
  }
}

export type GetEntitlementsSequenceQueryVariables = Exact<{
  input: GetEntitlementsSequenceInput
}>

export type GetEntitlementsSequenceQuery = {
  __typename?: 'Query'
  getEntitlementsSequence?: {
    __typename?: 'EntitlementsSequence'
    name: string
    description?: string | null
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    transitions: Array<{
      __typename?: 'EntitlementsSequenceTransition'
      entitlementsSetName: string
      duration?: string | null
    }>
  } | null
}

export type GetEntitlementsSetQueryVariables = Exact<{
  input: GetEntitlementsSetInput
}>

export type GetEntitlementsSetQuery = {
  __typename?: 'Query'
  getEntitlementsSet?: {
    __typename?: 'EntitlementsSet'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    name: string
    description?: string | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  } | null
}

export type ListEntitlementDefinitionsQueryVariables = Exact<{
  limit?: InputMaybe<Scalars['Int']>
  nextToken?: InputMaybe<Scalars['String']>
}>

export type ListEntitlementDefinitionsQuery = {
  __typename?: 'Query'
  listEntitlementDefinitions: {
    __typename?: 'EntitlementDefinitionConnection'
    nextToken?: string | null
    items: Array<{
      __typename?: 'EntitlementDefinition'
      name: string
      description?: string | null
      type: 'numeric' | 'boolean'
    }>
  }
}

export type ListEntitlementsSequencesQueryVariables = Exact<{
  nextToken?: InputMaybe<Scalars['String']>
}>

export type ListEntitlementsSequencesQuery = {
  __typename?: 'Query'
  listEntitlementsSequences: {
    __typename?: 'EntitlementsSequencesConnection'
    nextToken?: string | null
    items: Array<{
      __typename?: 'EntitlementsSequence'
      name: string
      description?: string | null
      createdAtEpochMs: number
      updatedAtEpochMs: number
      version: number
      transitions: Array<{
        __typename?: 'EntitlementsSequenceTransition'
        entitlementsSetName: string
        duration?: string | null
      }>
    }>
  }
}

export type ListEntitlementsSetsQueryVariables = Exact<{
  nextToken?: InputMaybe<Scalars['String']>
}>

export type ListEntitlementsSetsQuery = {
  __typename?: 'Query'
  listEntitlementsSets: {
    __typename?: 'EntitlementsSetsConnection'
    nextToken?: string | null
    items: Array<{
      __typename?: 'EntitlementsSet'
      createdAtEpochMs: number
      updatedAtEpochMs: number
      version: number
      name: string
      description?: string | null
      entitlements: Array<{
        __typename?: 'Entitlement'
        name: string
        description?: string | null
        value: number
      }>
    }>
  }
}

export type RemoveEntitledUserMutationVariables = Exact<{
  input: RemoveEntitledUserInput
}>

export type RemoveEntitledUserMutation = {
  __typename?: 'Mutation'
  removeEntitledUser?: {
    __typename?: 'EntitledUser'
    externalId: string
  } | null
}

export type RemoveEntitlementsSequenceMutationVariables = Exact<{
  input: RemoveEntitlementsSequenceInput
}>

export type RemoveEntitlementsSequenceMutation = {
  __typename?: 'Mutation'
  removeEntitlementsSequence?: {
    __typename?: 'EntitlementsSequence'
    name: string
    description?: string | null
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    transitions: Array<{
      __typename?: 'EntitlementsSequenceTransition'
      entitlementsSetName: string
      duration?: string | null
    }>
  } | null
}

export type RemoveEntitlementsSetMutationVariables = Exact<{
  input: RemoveEntitlementsSetInput
}>

export type RemoveEntitlementsSetMutation = {
  __typename?: 'Mutation'
  removeEntitlementsSet?: {
    __typename?: 'EntitlementsSet'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    name: string
    description?: string | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  } | null
}

export type SetEntitlementsSequenceMutationVariables = Exact<{
  input: SetEntitlementsSequenceInput
}>

export type SetEntitlementsSequenceMutation = {
  __typename?: 'Mutation'
  setEntitlementsSequence: {
    __typename?: 'EntitlementsSequence'
    name: string
    description?: string | null
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    transitions: Array<{
      __typename?: 'EntitlementsSequenceTransition'
      entitlementsSetName: string
      duration?: string | null
    }>
  }
}

export type SetEntitlementsSetMutationVariables = Exact<{
  input: SetEntitlementsSetInput
}>

export type SetEntitlementsSetMutation = {
  __typename?: 'Mutation'
  setEntitlementsSet: {
    __typename?: 'EntitlementsSet'
    createdAtEpochMs: number
    updatedAtEpochMs: number
    version: number
    name: string
    description?: string | null
    entitlements: Array<{
      __typename?: 'Entitlement'
      name: string
      description?: string | null
      value: number
    }>
  }
}

export const EntitlementDefinitionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementDefinition' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementDefinition' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'type' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntitlementDefinitionFragment, unknown>
export const EntitlementsSequenceTransitionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementsSequenceTransition' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementsSequenceTransition' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlementsSetName' },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'duration' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntitlementsSequenceTransitionFragment, unknown>
export const EntitlementsSequenceFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementsSequence' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementsSequence' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'transitions' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: {
                    kind: 'Name',
                    value: 'EntitlementsSequenceTransition',
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSequenceTransitionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EntitlementsSequenceFragment, unknown>
export const EntitlementsSequencesConnectionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementsSequencesConnection' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementsSequencesConnection' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'items' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSequence' },
                },
              ],
            },
          },
          { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
        ],
      },
    },
    ...EntitlementsSequenceFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EntitlementsSequencesConnectionFragment, unknown>
export const EntitlementFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'Entitlement' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'Entitlement' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntitlementFragment, unknown>
export const EntitlementsSetFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementsSet' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementsSet' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'description' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Entitlement' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<EntitlementsSetFragment, unknown>
export const ExternalUserEntitlementsFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'ExternalUserEntitlements' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'ExternalUserEntitlements' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'createdAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'updatedAtEpochMs' } },
          { kind: 'Field', name: { kind: 'Name', value: 'version' } },
          { kind: 'Field', name: { kind: 'Name', value: 'externalId' } },
          { kind: 'Field', name: { kind: 'Name', value: 'owner' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlementsSetName' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlementsSequenceName' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'Entitlement' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'transitionsRelativeToEpochMs' },
          },
        ],
      },
    },
    ...EntitlementFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ExternalUserEntitlementsFragment, unknown>
export const EntitlementConsumptionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'EntitlementConsumption' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'EntitlementConsumption' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          { kind: 'Field', name: { kind: 'Name', value: 'name' } },
          { kind: 'Field', name: { kind: 'Name', value: 'value' } },
          { kind: 'Field', name: { kind: 'Name', value: 'consumed' } },
          { kind: 'Field', name: { kind: 'Name', value: 'available' } },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'firstConsumedAtEpochMs' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'lastConsumedAtEpochMs' },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'consumer' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'id' } },
                { kind: 'Field', name: { kind: 'Name', value: 'issuer' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<EntitlementConsumptionFragment, unknown>
export const ExternalEntitlementsConsumptionFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'ExternalEntitlementsConsumption' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'ExternalEntitlementsConsumption' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'entitlements' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'ExternalUserEntitlements' },
                },
              ],
            },
          },
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'consumption' },
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementConsumption' },
                },
              ],
            },
          },
        ],
      },
    },
    ...ExternalUserEntitlementsFragmentDoc.definitions,
    ...EntitlementConsumptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<ExternalEntitlementsConsumptionFragment, unknown>
export const ExternalUserEntitlementsErrorFragmentDoc = {
  kind: 'Document',
  definitions: [
    {
      kind: 'FragmentDefinition',
      name: { kind: 'Name', value: 'ExternalUserEntitlementsError' },
      typeCondition: {
        kind: 'NamedType',
        name: { kind: 'Name', value: 'ExternalUserEntitlementsError' },
      },
      selectionSet: {
        kind: 'SelectionSet',
        selections: [{ kind: 'Field', name: { kind: 'Name', value: 'error' } }],
      },
    },
  ],
} as unknown as DocumentNode<ExternalUserEntitlementsErrorFragment, unknown>
export const AddEntitlementsSequenceDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'AddEntitlementsSequence' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'AddEntitlementsSequenceInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'addEntitlementsSequence' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSequence' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSequenceFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  AddEntitlementsSequenceMutation,
  AddEntitlementsSequenceMutationVariables
>
export const AddEntitlementsSetDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'AddEntitlementsSet' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'AddEntitlementsSetInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'addEntitlementsSet' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSet' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSetFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  AddEntitlementsSetMutation,
  AddEntitlementsSetMutationVariables
>
export const ApplyEntitlementsSequenceToUserDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'ApplyEntitlementsSequenceToUser' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'ApplyEntitlementsSequenceToUserInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'applyEntitlementsSequenceToUser' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'ExternalUserEntitlements' },
                },
              ],
            },
          },
        ],
      },
    },
    ...ExternalUserEntitlementsFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  ApplyEntitlementsSequenceToUserMutation,
  ApplyEntitlementsSequenceToUserMutationVariables
>
export const ApplyEntitlementsSequenceToUsersDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'ApplyEntitlementsSequenceToUsers' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: {
                kind: 'Name',
                value: 'ApplyEntitlementsSequenceToUsersInput',
              },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'applyEntitlementsSequenceToUsers' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },
                {
                  kind: 'InlineFragment',
                  typeCondition: {
                    kind: 'NamedType',
                    name: { kind: 'Name', value: 'ExternalUserEntitlements' },
                  },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'ExternalUserEntitlements',
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'InlineFragment',
                  typeCondition: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ExternalUserEntitlementsError',
                    },
                  },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'ExternalUserEntitlementsError',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ExternalUserEntitlementsFragmentDoc.definitions,
    ...ExternalUserEntitlementsErrorFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  ApplyEntitlementsSequenceToUsersMutation,
  ApplyEntitlementsSequenceToUsersMutationVariables
>
export const ApplyEntitlementsSetToUserDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'ApplyEntitlementsSetToUser' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ApplyEntitlementsSetToUserInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'applyEntitlementsSetToUser' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'ExternalUserEntitlements' },
                },
              ],
            },
          },
        ],
      },
    },
    ...ExternalUserEntitlementsFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  ApplyEntitlementsSetToUserMutation,
  ApplyEntitlementsSetToUserMutationVariables
>
export const ApplyEntitlementsSetToUsersDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'ApplyEntitlementsSetToUsers' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ApplyEntitlementsSetToUsersInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'applyEntitlementsSetToUsers' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },
                {
                  kind: 'InlineFragment',
                  typeCondition: {
                    kind: 'NamedType',
                    name: { kind: 'Name', value: 'ExternalUserEntitlements' },
                  },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'ExternalUserEntitlements',
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'InlineFragment',
                  typeCondition: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ExternalUserEntitlementsError',
                    },
                  },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'ExternalUserEntitlementsError',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ExternalUserEntitlementsFragmentDoc.definitions,
    ...ExternalUserEntitlementsErrorFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  ApplyEntitlementsSetToUsersMutation,
  ApplyEntitlementsSetToUsersMutationVariables
>
export const ApplyEntitlementsToUserDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'ApplyEntitlementsToUser' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ApplyEntitlementsToUserInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'applyEntitlementsToUser' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'ExternalUserEntitlements' },
                },
              ],
            },
          },
        ],
      },
    },
    ...ExternalUserEntitlementsFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  ApplyEntitlementsToUserMutation,
  ApplyEntitlementsToUserMutationVariables
>
export const ApplyEntitlementsToUsersDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'ApplyEntitlementsToUsers' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'ApplyEntitlementsToUsersInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'applyEntitlementsToUsers' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: '__typename' } },
                {
                  kind: 'InlineFragment',
                  typeCondition: {
                    kind: 'NamedType',
                    name: { kind: 'Name', value: 'ExternalUserEntitlements' },
                  },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'ExternalUserEntitlements',
                        },
                      },
                    ],
                  },
                },
                {
                  kind: 'InlineFragment',
                  typeCondition: {
                    kind: 'NamedType',
                    name: {
                      kind: 'Name',
                      value: 'ExternalUserEntitlementsError',
                    },
                  },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: {
                          kind: 'Name',
                          value: 'ExternalUserEntitlementsError',
                        },
                      },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ExternalUserEntitlementsFragmentDoc.definitions,
    ...ExternalUserEntitlementsErrorFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  ApplyEntitlementsToUsersMutation,
  ApplyEntitlementsToUsersMutationVariables
>
export const GetEntitlementDefinitionDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEntitlementDefinition' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'GetEntitlementDefinitionInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEntitlementDefinition' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementDefinition' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementDefinitionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  GetEntitlementDefinitionQuery,
  GetEntitlementDefinitionQueryVariables
>
export const GetEntitlementsForUserDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEntitlementsForUser' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'GetEntitlementsForUserInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEntitlementsForUser' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: {
                    kind: 'Name',
                    value: 'ExternalEntitlementsConsumption',
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...ExternalEntitlementsConsumptionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  GetEntitlementsForUserQuery,
  GetEntitlementsForUserQueryVariables
>
export const GetEntitlementsSequenceDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEntitlementsSequence' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'GetEntitlementsSequenceInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEntitlementsSequence' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSequence' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSequenceFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  GetEntitlementsSequenceQuery,
  GetEntitlementsSequenceQueryVariables
>
export const GetEntitlementsSetDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetEntitlementsSet' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'GetEntitlementsSetInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getEntitlementsSet' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSet' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSetFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  GetEntitlementsSetQuery,
  GetEntitlementsSetQueryVariables
>
export const ListEntitlementDefinitionsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListEntitlementDefinitions' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'limit' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'Int' } },
        },
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'nextToken' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listEntitlementDefinitions' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'limit' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'limit' },
                },
              },
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'nextToken' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'nextToken' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'items' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'EntitlementDefinition' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementDefinitionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  ListEntitlementDefinitionsQuery,
  ListEntitlementDefinitionsQueryVariables
>
export const ListEntitlementsSequencesDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListEntitlementsSequences' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'nextToken' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listEntitlementsSequences' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'nextToken' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'nextToken' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: {
                    kind: 'Name',
                    value: 'EntitlementsSequencesConnection',
                  },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSequencesConnectionFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  ListEntitlementsSequencesQuery,
  ListEntitlementsSequencesQueryVariables
>
export const ListEntitlementsSetsDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'ListEntitlementsSets' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'nextToken' },
          },
          type: { kind: 'NamedType', name: { kind: 'Name', value: 'String' } },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'listEntitlementsSets' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'nextToken' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'nextToken' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'items' },
                  selectionSet: {
                    kind: 'SelectionSet',
                    selections: [
                      {
                        kind: 'FragmentSpread',
                        name: { kind: 'Name', value: 'EntitlementsSet' },
                      },
                    ],
                  },
                },
                { kind: 'Field', name: { kind: 'Name', value: 'nextToken' } },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSetFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  ListEntitlementsSetsQuery,
  ListEntitlementsSetsQueryVariables
>
export const RemoveEntitledUserDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RemoveEntitledUser' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'RemoveEntitledUserInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'removeEntitledUser' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                { kind: 'Field', name: { kind: 'Name', value: 'externalId' } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  RemoveEntitledUserMutation,
  RemoveEntitledUserMutationVariables
>
export const RemoveEntitlementsSequenceDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RemoveEntitlementsSequence' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'RemoveEntitlementsSequenceInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'removeEntitlementsSequence' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSequence' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSequenceFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  RemoveEntitlementsSequenceMutation,
  RemoveEntitlementsSequenceMutationVariables
>
export const RemoveEntitlementsSetDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'RemoveEntitlementsSet' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'RemoveEntitlementsSetInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'removeEntitlementsSet' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSet' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSetFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  RemoveEntitlementsSetMutation,
  RemoveEntitlementsSetMutationVariables
>
export const SetEntitlementsSequenceDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'SetEntitlementsSequence' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'SetEntitlementsSequenceInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'setEntitlementsSequence' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSequence' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSequenceFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  SetEntitlementsSequenceMutation,
  SetEntitlementsSequenceMutationVariables
>
export const SetEntitlementsSetDocument = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'mutation',
      name: { kind: 'Name', value: 'SetEntitlementsSet' },
      variableDefinitions: [
        {
          kind: 'VariableDefinition',
          variable: {
            kind: 'Variable',
            name: { kind: 'Name', value: 'input' },
          },
          type: {
            kind: 'NonNullType',
            type: {
              kind: 'NamedType',
              name: { kind: 'Name', value: 'SetEntitlementsSetInput' },
            },
          },
        },
      ],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'setEntitlementsSet' },
            arguments: [
              {
                kind: 'Argument',
                name: { kind: 'Name', value: 'input' },
                value: {
                  kind: 'Variable',
                  name: { kind: 'Name', value: 'input' },
                },
              },
            ],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'FragmentSpread',
                  name: { kind: 'Name', value: 'EntitlementsSet' },
                },
              ],
            },
          },
        ],
      },
    },
    ...EntitlementsSetFragmentDoc.definitions,
  ],
} as unknown as DocumentNode<
  SetEntitlementsSetMutation,
  SetEntitlementsSetMutationVariables
>
